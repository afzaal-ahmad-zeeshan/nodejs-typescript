{
	"info": {
		"_postman_id": "a492cf2e-86da-43f2-858c-a1282e2e1cd1",
		"name": "TypeScript + Express.js - Take home assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "GET my tokens - should not work without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 403\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eq(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/auth/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login for token for buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"token should not be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token.token).to.not.be.empty;\r",
									"});\r",
									"pm.collectionVariables.set(\r",
									"    \"buyerToken\", \r",
									"    pm.response.json().token.token,\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john-doe\",\r\n    \"password\": \"I234S6789O\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login for token for seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"token should not be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token.token).to.not.be.empty;\r",
									"});\r",
									"pm.collectionVariables.set(\r",
									"    \"sellerToken\", \r",
									"    pm.response.json().token.token,\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"dane-joe\",\r\n    \"password\": \"I234S6789O\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET my tokens",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/auth/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST logout my token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET my tokens after logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 403\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eq(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/auth/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login for token for seller again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"token should not be empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token.token).to.not.be.empty;\r",
									"});\r",
									"pm.collectionVariables.set(\r",
									"    \"sellerToken\", \r",
									"    pm.response.json().token.token,\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"dane-joe\",\r\n    \"password\": \"I234S6789O\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create a new user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"User\",\r\n    \"password\": \"p@55w0rd\",\r\n    \"deposit\": 0,\r\n    \"roles\": [\r\n        \"ROLES::BUYER\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"// read the products\r",
									"pm.collectionVariables.set(\r",
									"    \"user1\",\r",
									"    pm.response.json().users[0].id\r",
									");\r",
									"pm.collectionVariables.set(\r",
									"    \"user2\",\r",
									"    pm.response.json().users[1].id\r",
									");\r",
									"pm.collectionVariables.set(\r",
									"    \"user5\",\r",
									"    pm.response.json().users[4].id\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});\r",
									"pm.test(\"response should have the user set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users/{{user1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{user1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user by id of a seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});\r",
									"pm.test(\"response should have the user set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users/{{user5}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{user5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT an existing user",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE an existing user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST deposit some amount to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"deposit to be not zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deposit).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deposit\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/deposit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST deposit some amount to user - should not work",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"deposit to be not zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deposit).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deposit\": 53\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/deposit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT reset the deposit of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"deposit to be zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deposit).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST deposit some amount to user for a seller",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deposit\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/deposit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "GET products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"// read the products\r",
									"pm.collectionVariables.set(\r",
									"    \"product1\",\r",
									"    pm.response.json().products[0].id\r",
									");\r",
									"pm.collectionVariables.set(\r",
									"    \"product2\",\r",
									"    pm.response.json().products[1].id\r",
									");\r",
									"pm.collectionVariables.set(\r",
									"    \"product5\",\r",
									"    pm.response.json().products[4].id\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET product by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});\r",
									"pm.test(\"response should have the product set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.product).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products/{{product1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"{{product1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new product - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should be 400\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productName\": \"product name\",\r\n    \"amountAvailable\": 6,\r\n    \"cost\": 2,\r\n    \"sellerId\": \"{{user1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new product - should pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"\r",
									"    pm.collectionVariables.set(\r",
									"        \"newProduct\", \r",
									"        pm.response.json().product.id,\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productName\": \"product name\",\r\n    \"amountAvailable\": 6,\r\n    \"cost\": 2,\r\n    \"sellerId\": \"{{user5}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST buy a product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{buyerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{product1}}\",\r\n    \"amount\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products/buy",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT an existing product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{newProduct}}\",\r\n    \"productName\": \"Updated product name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET the updated product name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});\r",
									"pm.test(\"response should have the product set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.product).to.not.be.null;\r",
									"});\r",
									"pm.test(\"response should have updated name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.product.productName)\r",
									"    .to.eq('Updated product name');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products/{{newProduct}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"{{newProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"statusCode should be 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sellerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products/{{newProduct}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"{{newProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET deleted product by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 404\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.statusCode).to.eql(404);\r",
									"});\r",
									"pm.test(\"response should not have the product set\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.product).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products/{{newProduct}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"{{newProduct}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "app",
			"item": [
				{
					"name": "GET health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/app/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"app",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET db dump",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/app/db",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"app",
								"db"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "product1",
			"value": ""
		},
		{
			"key": "product2",
			"value": ""
		},
		{
			"key": "product5",
			"value": ""
		},
		{
			"key": "user1",
			"value": ""
		},
		{
			"key": "user2",
			"value": ""
		},
		{
			"key": "user3",
			"value": ""
		},
		{
			"key": "user5",
			"value": ""
		},
		{
			"key": "sellerToken",
			"value": ""
		},
		{
			"key": "buyerToken",
			"value": ""
		},
		{
			"key": "newProduct",
			"value": ""
		}
	]
}
